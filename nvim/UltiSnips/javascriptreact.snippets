snippet fre "react function component"
import React from 'react'

const $1 = (props) => {
  return <div>$2</div>;
};
export default $1;

endsnippet

snippet uses "react useState"
  const [$1,$2]=React.useState($3)
endsnippet
 
snippet zlog "z console"
	console.log($1)
endsnippet
    
snippet dlog "log arrow"
console.log('-->', $1)
endsnippet

snippet usee "react useEffect"
React.useEffect(()=>{
	$1	
},[$2])
endsnippet

snippet constf "const function"
const $1=($2)=>{
	$3
}
endsnippet

snippet func "default function"
function $1(){
	$2
}
endsnippet
	
snippet action "redux action"
export const $1=(payload:any)=>dispatch=>dispatch({
			type:$2,
			payload
		})
endsnippet

snippet usec "react useCallback"
React.useCallback(()=>{
	$1	
},[$2])
endsnippet

snippet imp "description"
import {$1} from '$2'
endsnippet



snippet rafcp "react function component"
import React from 'react'
const $1 = (props) => {
  return <div>$2</div>;
};
export default $1;
endsnippet

snippet slog "Console.log" b
console.log("%c--->","font-weight:bold;color:red;", $1);
endsnippet

snippet clog "log-double"
	console.log($1, '[$1]' )
endsnippet

snippet cdispatch "define dispatch"
	const dispatch = useDispatch()
endsnippet

snippet improute "import route"
	import { Redirect, Route, Switch } from 'react-router-dom';
endsnippet

snippet improute "import route"
  import { Redirect, Route, Switch } from 'react-router-dom'
endsnippet

snippet cstyles "cstyle-components"
const $1 = styled.div` `;
endsnippet

snippet impstylecomponent "import styled-components"
import styled from 'styled-components'
endsnippet

snippet impsga "import sagas"
import { takeLatest, call, put } from 'redux-saga/effects';
endsnippet

snippet swreducer "switch-reducers"
const initialState = [];
export default (state = initialState, { type, payload }) => {
  switch (type) {
    case '$1': {
    return initialState;
    }
    default:
    return state
    }
  }
endsnippet

snippet cfn "const function"
const $1 = ($2) => {
	$3
}
endsnippet

snippet func "default function"
function $1() {
	$2
}
endsnippet


# ==========================================
# React Snippets
#
snippet rce "React class exported" b
import React, { Component } from 'react';

export default class ${1:`!v expand('%:t:r')`} extends Component {
	constructor(props) {
		super(props);

		this.state = {};
	}

	render() {
		return null;$0
	}
}
endsnippet

snippet rcc "React class component" b
class $1 extends Component {
	render() {
		return null;$0
	}
}
endsnippet

snippet rcon "React class constructor" b
constructor(props) {
	super(props);

	this.state = ${1:{}};$0
}
endsnippet




snippet cstate "class state"

this.setState({$1})

endsnippet





# PropTypes
snippet pt "PropTypes Definition" b
${1:`!v expand('%:t:r')`.}propTypes = {
	${2:className}: ${3:PropTypes.string},
};
endsnippet

snippet  pt.a "PropTypes Array" w
PropTypes.array${1:,}
endsnippet

snippet pt.b "PropTypes Boolean" w
PropTypes.bool${1:,}
endsnippet

snippet pt.f "PropTypes Function" w
PropTypes.func${1:,}
endsnippet

snippet pt.n "PropTypes Number" w
PropTypes.number${1:,}
endsnippet

snippet pt.o "PropTypes Object" w
PropTypes.object${1:,}
endsnippet

snippet pt.s "PropType String" w
PropTypes.string${1:,}
endsnippet

snippet pt.no "PropTypes Node" w
PropTypes.node${1:,}
endsnippet

snippet pt.e "PropTypes Element" w
PropTypes.element${1:,}
endsnippet

snippet pt.io "PropTypes instanceOf" w
PropTypes.instanceOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.one "PropTypes oneOf" w
PropTypes.oneOf(['$2'$3])${1:,}
endsnippet

snippet pt.onet "PropTypes oneOfType" w
PropTypes.oneOfType([
	$2
])${1:,}
endsnippet

snippet pt.ao "PropTypes arrayOf" w
PropTypes.arrayOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.oo "PropTypes objectOf" w
PropTypes.objectOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.sh "PropTyes Shape" w
PropTypes.shape({
	$2
})${1:,}
endsnippet

snippet ir "isRequired" w
isRequired,
endsnippet

# end props type
